library(devtools)
library(roxygen2)
library(testthat)
devtools::session_info()
devtools::use_packages("dplyr")
library()
library(devtools)
devtools::use_packages("dplyr")
use_packages("dplyr")
use_package("dplyr")
use_package("tidyr")
use_mit_license()
?add
help("add")
?add_test
devtools::document()
devtools::document()
?add_test
??add_test
devtools::load_all(".")
?add_test
??add_test
devtools::document()
?add_test
devtools::document()
devtools::load_all()
?add_test
devtools::document()
?add_test
library(available)
available("MRAS")
devtools::load_all(".")
library(MRAS)
?hello
library(roxygen2)
library(MRAS)
?hello
library(MRAS)
?hello
library(MRAS)
?hello
library(MRAS)
?hello
hello(a)
hello("a")
library(MRAS)
?hello
?hello
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
add_tset(2,4)
library(usethis)
use_readme_rmd()
use_vignette("Best_Vignette_ever")
?hello
library(MRAS)
library(MRAS)
use_package("tibble")
library(MRAS)
library(MRAS)
printer(x = rnorm(5), r = rnorm(5))
library(MRAS)
?cor
a<-matrx(rnorm(100),nrow=10,ncol=10)
aste("gene",1:10,sep=")
)
''
"
)
paste("gene",1:10,sep="")
library(MRAS)
library(MRAS)
?cor_matrix
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
?cor
library(MRAS)
?DS
a<-c("you","me","he","she","it")
a
library(MRAS)
?tj
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
library(MRAS)
rbp_list<-read.csv("D:/Project/SMRA/03_data/rmats/RBP.csv",header = T)
colnames(rbp_list)<-c("rbp_ID","TCGA_ID","RNA_matrix","type")
usethis::use_data(rbp_list)
library(MRAS)
dat()
data()
data(MRAS)
data("MRAS")
data("rbp_list")
force(rbp_list)
force(rbp_list)
data("rbp_list")
View(rbp_list)
library(MRAS)
library(MRAS)
?cor_matrix
library(MRAS)
a<-matrix(rnorm(25),nrow=5,ncol=5)
rownames(a)<-paste("gene",1:5,sep="")
b<-matrix(rnorm(25),nrow=5,ncol=5)
rownames(b)<-paste("event",1:5,sep="")
a
b
RBP_matrix<-a
Events_matrix<-b
method="pearson"
RBP_Events<-matrix(NA,nrow = nrow(RBP_matrix)*nrow(Events_matrix),ncol = 5)
View(RBP_Events)
colnames(RBP_Events)<-c("rbp_ID","Events","type","corr","p")
p=1
q=1
(p-1)*nrow(RBP_Events)+q
rank_number<-(p-1)*nrow(RBP_Events)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
View(cor_result)
RBP_Events[rank_number,1]
as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[p])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
for (p in 1:nrow(RBP_Events)) {
for (q in 1:ncol(RBP_Events)) {
rank_number<-(p-1)*nrow(RBP_Events)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[p])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
}
}
rank_number<-(p-1)*nrow(RBP_Events)+q
rank_number
nrow(RBP_Events)
library(MRAS)
library(MRAS)
library(MRAS)
a<-matrix(rnorm(25),nrow=5,ncol=5)
rownames(a)<-paste("gene",1:5,sep="")
b<-matrix(rnorm(25),nrow=5,ncol=5)
rownames(b)<-paste("event",1:5,sep="")
RBP_matrix=a
Events_matrix=b
RBP_Events<-matrix(NA,nrow = nrow(RBP_matrix)*nrow(Events_matrix),ncol = 5)
colnames(RBP_Events)<-c("rbp_ID","Events","type","corr","p")
for (p in 1:nrow(RBP_matrix)) {
for (q in 1:ncol(Events_matrix)) {
rank_number<-(p-1)*nrow(RBP_matrix)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[q])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
}
}
method="pearson"
for (p in 1:nrow(RBP_matrix)) {
for (q in 1:ncol(Events_matrix)) {
rank_number<-(p-1)*nrow(RBP_matrix)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[q])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
}
}
View(RBP_Events)
library(MRAS)
head(c[1:5,])
library(MRAS)
View(RBP_Events)
c<-cor_matrix(a,b)
c
RBP_Events[rank_number,3]<-ifelse(RBP_Events[rank_number,4]>0,"up","down")
View(Events_matrix)
for (p in 1:nrow(RBP_matrix)) {
for (q in 1:ncol(Events_matrix)) {
rank_number<-(p-1)*nrow(RBP_matrix)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[q])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
}
}
RBP_Events[,3]<-ifelse(RBP_Events[,4]>0,"up","down")
View(Events_matrix)
RBP_Events<-matrix(NA,nrow = nrow(RBP_matrix)*nrow(Events_matrix),ncol = 5)
colnames(RBP_Events)<-c("rbp_ID","Events","type","corr","p")
for (p in 1:nrow(RBP_matrix)) {
for (q in 1:ncol(Events_matrix)) {
rank_number<-(p-1)*nrow(RBP_matrix)+q
cor_result<-cor(as.numeric(RBP_matrix[p,]),as.numeric(Events_matrix[q,]),method)
RBP_Events[rank_number,1]<-as.character(rownames(RBP_matrix)[p])
RBP_Events[rank_number,2]<-as.character(rownames(Events_matrix)[q])
RBP_Events[rank_number,4]<-cor_result[["corr"]]
RBP_Events[rank_number,5]<-cor_result[["pvalue"]]
}
}
View(RBP_Events)
RBP_Events[,3]<-ifelse(RBP_Events[,4]>0,"up","down")
RBP_Events<-RBP_Events[complete.cases(RBP_Events),]
library(MRAS)
devtools::load_all(".")
library(MRAS)
>cor
?cor
rbp_list<-read.csv("D:/Project/SMRA/03_data/rmats/RBP.csv",header = T)
colnames(rbp_list)<-c("rbp_ID","TCGA_ID","RNA_matrix","type")
usethis::use_data(rbp_list,internal = T)
library(MRAS)
data(package="MRAS")
??MRAS
library(MRAS)
library(MRAS)
??MRAS
library(MRAS)
library(MRAS)
devtools::build_readme()
dat<-read.table(paste0(path_use,"/result_top10.txt"),header = T)
#' This function provides a way to get the results in the form of "Top10".
#'
#' @param path_use The path to the file used to store the output.
#'
#' @return Return results in "top10" format
#' @export
#'
get_Top10<-function(path_use){
dat<-read.table(paste0(path_use,"/result_top10.txt"),header = T)
return(dat)
}
